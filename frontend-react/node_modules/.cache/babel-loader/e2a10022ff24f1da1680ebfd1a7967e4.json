{"ast":null,"code":"import Keycloak from \"keycloak-js\";\n\nconst _kc = new Keycloak('/keycloak.json');\n/**\n * Initializes Keycloak instance and calls the provided callback function if successfully authenticated.\n *\n * @param onAuthenticatedCallback\n */\n\n\nconst initKeycloak = onAuthenticatedCallback => {\n  _kc.init({\n    //onLoad: 'login-required',\n    onLoad: 'check-sso',\n    silentCheckSsoRedirectUri: window.location.origin + '/silent-check-sso.html',\n    pkceMethod: 'S256'\n  }).then(authenticated => {\n    // if (authenticated) {\n    onAuthenticatedCallback(); // } else {\n    //   doLogin();\n    // }\n  }).catch(err => {\n    console.log('err', err);\n  });\n};\n\nconst doLogin = _kc.login;\nconst doLogout = _kc.logout;\n\nconst getToken = () => _kc.token;\n\nconst isLoggedIn = () => !!_kc.token;\n\nconst updateToken = successCallback => _kc.updateToken(5).then(successCallback).catch(doLogin);\n\nconst getUsername = () => {\n  var _kc$tokenParsed;\n\n  return (_kc$tokenParsed = _kc.tokenParsed) === null || _kc$tokenParsed === void 0 ? void 0 : _kc$tokenParsed.preferred_username;\n};\n\nconst hasRole = roles => roles.some(role => _kc.hasRealmRole(role));\n\nconst tokenExpired = _kc.onTokenExpired = () => {\n  console.log('token expired!: previous token', _kc.token);\n\n  if (window.confirm('Do you want to keep login')) {\n    try {\n      _kc.updateToken(5).then(response => {\n        console.log('response');\n\n        if (response.ok) {\n          console.log('successfully get a new token', _kc.token);\n        } else {\n          throw new Error('Something went wrong ...');\n        }\n      }).catch(err => console.log('updateToken', err));\n    } catch (e) {\n      console.log('err', e);\n    }\n  } else {\n    doLogout();\n  }\n};\n\nconst UserService = {\n  initKeycloak,\n  doLogin,\n  doLogout,\n  isLoggedIn,\n  getToken,\n  updateToken,\n  getUsername,\n  hasRole //tokenExpired\n\n};\nexport default UserService;","map":{"version":3,"sources":["/home/syed/Documents/react-keycloak-js/src/services/UserService.js"],"names":["Keycloak","_kc","initKeycloak","onAuthenticatedCallback","init","onLoad","silentCheckSsoRedirectUri","window","location","origin","pkceMethod","then","authenticated","catch","err","console","log","doLogin","login","doLogout","logout","getToken","token","isLoggedIn","updateToken","successCallback","getUsername","tokenParsed","preferred_username","hasRole","roles","some","role","hasRealmRole","tokenExpired","onTokenExpired","confirm","response","ok","Error","e","UserService"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,aAArB;;AAEA,MAAMC,GAAG,GAAG,IAAID,QAAJ,CAAa,gBAAb,CAAZ;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAME,YAAY,GAAIC,uBAAD,IAA6B;AAChDF,EAAAA,GAAG,CAACG,IAAJ,CAAS;AACP;AACAC,IAAAA,MAAM,EAAE,WAFD;AAGPC,IAAAA,yBAAyB,EAAEC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,GAAyB,wBAH7C;AAIPC,IAAAA,UAAU,EAAE;AAJL,GAAT,EAMGC,IANH,CAMSC,aAAD,IAAmB;AACvB;AACAT,IAAAA,uBAAuB,GAFA,CAGvB;AACA;AACA;AACD,GAZH,EAYKU,KAZL,CAYWC,GAAG,IAAE;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkBF,GAAlB;AACN,GAdD;AAeD,CAhBD;;AAkBA,MAAMG,OAAO,GAAGhB,GAAG,CAACiB,KAApB;AAEA,MAAMC,QAAQ,GAAGlB,GAAG,CAACmB,MAArB;;AAEA,MAAMC,QAAQ,GAAG,MAAMpB,GAAG,CAACqB,KAA3B;;AAEA,MAAMC,UAAU,GAAG,MAAM,CAAC,CAACtB,GAAG,CAACqB,KAA/B;;AAEA,MAAME,WAAW,GAAIC,eAAD,IAClBxB,GAAG,CAACuB,WAAJ,CAAgB,CAAhB,EACGb,IADH,CACQc,eADR,EAEGZ,KAFH,CAESI,OAFT,CADF;;AAKA,MAAMS,WAAW,GAAG;AAAA;;AAAA,4BAAMzB,GAAG,CAAC0B,WAAV,oDAAM,gBAAiBC,kBAAvB;AAAA,CAApB;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAYC,IAAD,IAAU/B,GAAG,CAACgC,YAAJ,CAAiBD,IAAjB,CAArB,CAA3B;;AAEA,MAAOE,YAAY,GAAEjC,GAAG,CAACkC,cAAJ,GAAqB,MAAM;AAC9CpB,EAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8Cf,GAAG,CAACqB,KAAlD;;AAEA,MAAGf,MAAM,CAAC6B,OAAP,CAAe,2BAAf,CAAH,EAA+C;AAE7C,QAAI;AAEFnC,MAAAA,GAAG,CAACuB,WAAJ,CAAgB,CAAhB,EAAmBb,IAAnB,CAAyB0B,QAAD,IAAc;AACpCtB,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;;AACA,YAAIqB,QAAQ,CAACC,EAAb,EAAiB;AACfvB,UAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4Cf,GAAG,CAACqB,KAAhD;AACD,SAFD,MAEO;AACL,gBAAM,IAAIiB,KAAJ,CAAU,0BAAV,CAAN;AACD;AACF,OAPD,EAOG1B,KAPH,CAOUC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BF,GAA1B,CAPjB;AAQD,KAVD,CAUC,OAAO0B,CAAP,EAAU;AACTzB,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkBwB,CAAlB;AACD;AAEF,GAhBD,MAgBM;AACJrB,IAAAA,QAAQ;AACT;AAEF,CAvBD;;AAyBA,MAAMsB,WAAW,GAAG;AAClBvC,EAAAA,YADkB;AAElBe,EAAAA,OAFkB;AAGlBE,EAAAA,QAHkB;AAIlBI,EAAAA,UAJkB;AAKlBF,EAAAA,QALkB;AAMlBG,EAAAA,WANkB;AAOlBE,EAAAA,WAPkB;AAQlBG,EAAAA,OARkB,CASlB;;AATkB,CAApB;AAYA,eAAeY,WAAf","sourcesContent":["import Keycloak from \"keycloak-js\";\n\nconst _kc = new Keycloak('/keycloak.json');\n\n/**\n * Initializes Keycloak instance and calls the provided callback function if successfully authenticated.\n *\n * @param onAuthenticatedCallback\n */\nconst initKeycloak = (onAuthenticatedCallback) => {\n  _kc.init({\n    //onLoad: 'login-required',\n    onLoad: 'check-sso',\n    silentCheckSsoRedirectUri: window.location.origin + '/silent-check-sso.html',\n    pkceMethod: 'S256',\n  })\n    .then((authenticated) => {\n      // if (authenticated) {\n      onAuthenticatedCallback();\n      // } else {\n      //   doLogin();\n      // }\n    }).catch(err=>{\n         console.log('err',err);\n  })\n};\n\nconst doLogin = _kc.login;\n\nconst doLogout = _kc.logout;\n\nconst getToken = () => _kc.token;\n\nconst isLoggedIn = () => !!_kc.token;\n\nconst updateToken = (successCallback) =>\n  _kc.updateToken(5)\n    .then(successCallback)\n    .catch(doLogin);\n\nconst getUsername = () => _kc.tokenParsed?.preferred_username;\n\nconst hasRole = (roles) => roles.some((role) => _kc.hasRealmRole(role));\n\nconst  tokenExpired =_kc.onTokenExpired = () => {\n  console.log('token expired!: previous token', _kc.token);\n\n  if(window.confirm('Do you want to keep login')){\n\n    try {\n\n      _kc.updateToken(5).then((response) => {\n        console.log('response');\n        if (response.ok) {\n          console.log('successfully get a new token', _kc.token);\n        } else {\n          throw new Error('Something went wrong ...');\n        }\n      }).catch( err => console.log('updateToken',err));\n    }catch (e) {\n      console.log('err',e);\n    }\n\n  }else {\n    doLogout();\n  }\n\n}\n\nconst UserService = {\n  initKeycloak,\n  doLogin,\n  doLogout,\n  isLoggedIn,\n  getToken,\n  updateToken,\n  getUsername,\n  hasRole,\n  //tokenExpired\n};\n\nexport default UserService;\n"]},"metadata":{},"sourceType":"module"}