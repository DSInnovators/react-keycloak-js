{"ast":null,"code":"import Keycloak from \"keycloak-js\";\n\nconst _kc = new Keycloak('/keycloak.json');\n/**\n * Initializes Keycloak instance and calls the provided callback function if successfully authenticated.\n *\n * @param onAuthenticatedCallback\n */\n\n\nconst initKeycloak = onAuthenticatedCallback => {\n  _kc.init({\n    onLoad: 'check-sso',\n    // onLoad: 'login-required',\n    silentCheckSsoRedirectUri: window.location.origin + '/silent-check-sso.html',\n    pkceMethod: 'S256'\n  }).then(authenticated => {\n    // if (authenticated) {\n    onAuthenticatedCallback(); // } else {\n    //   doLogin();\n    // }\n  });\n};\n\nconst doLogin = _kc.login;\nconst doLogout = _kc.logout;\n\nconst getToken = () => _kc.token;\n\nconst isLoggedIn = () => !!_kc.token;\n\nconst updateToken = successCallback => _kc.updateToken(5).then(successCallback).catch(doLogin);\n\nconst getUsername = () => {\n  var _kc$tokenParsed;\n\n  return (_kc$tokenParsed = _kc.tokenParsed) === null || _kc$tokenParsed === void 0 ? void 0 : _kc$tokenParsed.preferred_username;\n};\n\nconst hasRole = roles => roles.some(role => _kc.hasRealmRole(role));\n\nconst tokenExpired = _kc.onTokenExpired = () => {\n  console.log('token expired', _kc.token);\n\n  _kc.updateToken(30).then(() => {\n    console.log('successfully get a new token', _kc.token);\n  }).catch(doLogin);\n};\n\nconst UserService = {\n  initKeycloak,\n  doLogin,\n  doLogout,\n  isLoggedIn,\n  getToken,\n  updateToken,\n  getUsername,\n  hasRole,\n  tokenExpired\n};\nexport default UserService;","map":{"version":3,"sources":["/home/syed/Documents/react-keycloak-js/src/services/UserService.js"],"names":["Keycloak","_kc","initKeycloak","onAuthenticatedCallback","init","onLoad","silentCheckSsoRedirectUri","window","location","origin","pkceMethod","then","authenticated","doLogin","login","doLogout","logout","getToken","token","isLoggedIn","updateToken","successCallback","catch","getUsername","tokenParsed","preferred_username","hasRole","roles","some","role","hasRealmRole","tokenExpired","onTokenExpired","console","log","UserService"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,aAArB;;AAEA,MAAMC,GAAG,GAAG,IAAID,QAAJ,CAAa,gBAAb,CAAZ;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAME,YAAY,GAAIC,uBAAD,IAA6B;AAChDF,EAAAA,GAAG,CAACG,IAAJ,CAAS;AACPC,IAAAA,MAAM,EAAE,WADD;AAER;AACCC,IAAAA,yBAAyB,EAAEC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,GAAyB,wBAH7C;AAIPC,IAAAA,UAAU,EAAE;AAJL,GAAT,EAMGC,IANH,CAMSC,aAAD,IAAmB;AACvB;AACAT,IAAAA,uBAAuB,GAFA,CAGvB;AACA;AACA;AACD,GAZH;AAaD,CAdD;;AAgBA,MAAMU,OAAO,GAAGZ,GAAG,CAACa,KAApB;AAEA,MAAMC,QAAQ,GAAGd,GAAG,CAACe,MAArB;;AAEA,MAAMC,QAAQ,GAAG,MAAMhB,GAAG,CAACiB,KAA3B;;AAEA,MAAMC,UAAU,GAAG,MAAM,CAAC,CAAClB,GAAG,CAACiB,KAA/B;;AAEA,MAAME,WAAW,GAAIC,eAAD,IAClBpB,GAAG,CAACmB,WAAJ,CAAgB,CAAhB,EACGT,IADH,CACQU,eADR,EAEGC,KAFH,CAEST,OAFT,CADF;;AAKA,MAAMU,WAAW,GAAG;AAAA;;AAAA,4BAAMtB,GAAG,CAACuB,WAAV,oDAAM,gBAAiBC,kBAAvB;AAAA,CAApB;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAYC,IAAD,IAAU5B,GAAG,CAAC6B,YAAJ,CAAiBD,IAAjB,CAArB,CAA3B;;AAGA,MAAOE,YAAY,GAAE9B,GAAG,CAAC+B,cAAJ,GAAqB,MAAM;AAC9CC,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BjC,GAAG,CAACiB,KAAjC;;AACAjB,EAAAA,GAAG,CAACmB,WAAJ,CAAgB,EAAhB,EAAoBT,IAApB,CAAyB,MAAM;AAC7BsB,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CjC,GAAG,CAACiB,KAAhD;AACD,GAFD,EAEGI,KAFH,CAEST,OAFT;AAGD,CALD;;AAOA,MAAMsB,WAAW,GAAG;AAClBjC,EAAAA,YADkB;AAElBW,EAAAA,OAFkB;AAGlBE,EAAAA,QAHkB;AAIlBI,EAAAA,UAJkB;AAKlBF,EAAAA,QALkB;AAMlBG,EAAAA,WANkB;AAOlBG,EAAAA,WAPkB;AAQlBG,EAAAA,OARkB;AASlBK,EAAAA;AATkB,CAApB;AAYA,eAAeI,WAAf","sourcesContent":["import Keycloak from \"keycloak-js\";\n\nconst _kc = new Keycloak('/keycloak.json');\n\n/**\n * Initializes Keycloak instance and calls the provided callback function if successfully authenticated.\n *\n * @param onAuthenticatedCallback\n */\nconst initKeycloak = (onAuthenticatedCallback) => {\n  _kc.init({\n    onLoad: 'check-sso',\n   // onLoad: 'login-required',\n    silentCheckSsoRedirectUri: window.location.origin + '/silent-check-sso.html',\n    pkceMethod: 'S256',\n  })\n    .then((authenticated) => {\n      // if (authenticated) {\n      onAuthenticatedCallback();\n      // } else {\n      //   doLogin();\n      // }\n    })\n};\n\nconst doLogin = _kc.login;\n\nconst doLogout = _kc.logout;\n\nconst getToken = () => _kc.token;\n\nconst isLoggedIn = () => !!_kc.token;\n\nconst updateToken = (successCallback) =>\n  _kc.updateToken(5)\n    .then(successCallback)\n    .catch(doLogin);\n\nconst getUsername = () => _kc.tokenParsed?.preferred_username;\n\nconst hasRole = (roles) => roles.some((role) => _kc.hasRealmRole(role));\n\n\nconst  tokenExpired =_kc.onTokenExpired = () => {\n  console.log('token expired', _kc.token);\n  _kc.updateToken(30).then(() => {\n    console.log('successfully get a new token', _kc.token);\n  }).catch(doLogin);\n}\n\nconst UserService = {\n  initKeycloak,\n  doLogin,\n  doLogout,\n  isLoggedIn,\n  getToken,\n  updateToken,\n  getUsername,\n  hasRole,\n  tokenExpired\n};\n\nexport default UserService;\n"]},"metadata":{},"sourceType":"module"}